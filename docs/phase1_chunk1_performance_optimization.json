{
  "chunk_id": "1.1",
  "title": "Performance Optimization - Fast Hand Evaluator",
  "priority": "HIGH",
  "estimated_time": "2-3 hours",
  "current_state": {
    "performance": "610 μs/hand",
    "target": "<100 μs/hand",
    "problem": "itertools.combinations is slow for 7-card evaluation"
  },
  "objectives": [
    "Optimize 7-card hand evaluation to meet <100 μs/hand target",
    "Pass the 10k hands performance test",
    "Document performance improvements"
  ],
  "approach": {
    "option_1_recommended": {
      "name": "Lookup Table (Cactus Kev / Two Plus Two)",
      "description": "Pre-computed perfect hash lookup table for 5-card hands",
      "pros": [
        "O(1) lookups - extremely fast (~1-10 μs/hand)",
        "Well-established algorithm",
        "No dependencies on C libraries"
      ],
      "cons": [
        "Requires ~6MB lookup table file",
        "Initial implementation complexity"
      ],
      "implementation": {
        "step_1": "Create lookup table generator (one-time setup)",
        "step_2": "Save table to data/evaluator_table.pkl or .npy",
        "step_3": "Load table on import, use for 5-card evaluation",
        "step_4": "For 7 cards: iterate 21 combinations, use fast lookup"
      }
    },
    "option_2_fallback": {
      "name": "Optimized Python with Caching",
      "description": "Cache rank frequencies, optimize straight checking",
      "pros": [
        "Simpler to implement",
        "No external files needed"
      ],
      "cons": [
        "Still likely 100-200 μs/hand",
        "May not meet target"
      ]
    }
  },
  "tasks": [
    {
      "task_id": "1.1.1",
      "title": "Choose optimization strategy",
      "details": [
        "Research Cactus Kev algorithm (recommended)",
        "Decide between lookup table vs optimized Python"
      ],
      "deliverable": "Decision documented in code comment"
    },
    {
      "task_id": "1.1.2",
      "title": "Implement fast evaluator",
      "details": [
        "If lookup table: Generate and save table",
        "Modify evaluate_hand() to use fast path",
        "Keep existing code as fallback/validation"
      ],
      "deliverable": "Optimized evaluator.py"
    },
    {
      "task_id": "1.1.3",
      "title": "Validate correctness",
      "details": [
        "Run all existing evaluator tests",
        "Compare results with original implementation on 1000 random hands",
        "Ensure 100% agreement"
      ],
      "deliverable": "All tests pass"
    },
    {
      "task_id": "1.1.4",
      "title": "Benchmark and document",
      "details": [
        "Run 10k hand test (should be <1s)",
        "Run 1M hand test (should be <10s)",
        "Document performance in docstring",
        "Add comment explaining optimization technique"
      ],
      "deliverable": "Performance tests pass, documentation updated"
    }
  ],
  "acceptance_criteria": [
    "test_performance_sample passes (10k hands in <1s)",
    "test_one_million_hands_performance passes (optional: <30s)",
    "All existing evaluator tests still pass",
    "Code is well-commented explaining optimization"
  ],
  "files_to_modify": [
    "src/texas_holdem_ml_bot/engine/evaluator.py"
  ],
  "files_to_create": [
    "data/evaluator_table.pkl (if using lookup table)"
  ],
  "helpful_resources": [
    "Cactus Kev evaluator: https://suffe.cool/poker/evaluator.html",
    "Two Plus Two evaluator: https://github.com/chenosaurus/poker-evaluator",
    "Python poker evaluator libs for reference: treys, deuces"
  ],
  "validation_command": "pytest tests/engine/test_evaluator.py::TestPerformance -v"
}
